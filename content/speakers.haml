---
title:       Ruby Midwest Conference / July 16-17, 2010 / Kansas City, MO
created_at: 2010-04-14 00:10:43.192778 -05:00
filter:
  - erb
  - haml
---
= render :partial => "navigation", :locals => {:current => 'speakers'}

#content.container
  #single-col{:style => 'padding-top:2.5em;padding-bottom:10em;'}
    %div{:class => 'buy_your_tickets'}
      %a{:target=>'_blank', :href=>'http://rubymidwest.stagehq.com/events/219/booking/new'} Buy your tickets
    %br
  
    .session
      %h2.first
        Keynotes
      %h3.speaker-title.first
        Yehuda Katz
      %p.abstract
        %img{:src=>'/images/speakers/yehuda-keynote.jpg', :width=>150, :height=>150, :alt=>'Yahuda Katz'}
        Yehuda Katz is currently employed by
        %a{ :href => "http://www.engineyard.com/" }
          Engine Yard
        , and works full time as a Core Team Member on the Rails project. He is the co-author of
        %a{ :href => "http://www.manning.com/affiliate/idevaffiliate.php?id=485_93" }
          jQuery in Action
        and the upcoming
        %a{ :href => "http://www.manning.com/affiliate/idevaffiliate.php?id=485_145" }
          Rails 3 in Action
        , and is a contributor to
        %a{ :href => "http://www.manning.com/affiliate/idevaffiliate.php?id=485_96" }
          Ruby in Practice
        \.
        He spends most of his time hacking on Rails, but also on other Ruby community projects, like
        %a{ :href => "http://rubini.us/" }
          Rubinius
        and
        %a{ :href => "http://datamapper.org/" }
          Datamapper
        \. And when the solution doesn't yet exist, he'll try his hand at creating one - as such, he's also created projects like
        %a{ :href => "http://github.com/wycats/thor/" }
          Thor
        and
        %a{ :href => "http://github.com/sam/do" }
          DO.rb
        \.
      %h3.speaker-title
        Chris Wanstrath
      %p.abstract
        %img{:src=>'/images/speakers/chris-keynote.jpg', :width=>150, :height=>150, :alt=>'Chris Wanstrath'}        
        Chris Wanstrath is a George R R Martin fan who lives in San Francisco
        and cofounded GitHub. He's an active open source developer and speaker
        whose projects and talks can be found at
        %a{ :href => "http://chriswanstrath.com" }
          http://chriswanstrath.com    
      %h2{:style => 'margin-top:1.5em'}
        Sessions
      %h3.speaker-title.first A New Set Of Wheels: Leveraging Ruby For System Administration 
      %p.abstract
        %img{:src=>'/images/speakers/joshua-french.jpg', :width=>66, :height=>80, :alt=>'Joshua French'}
        %span.speaker-name Joshua French &ndash;
      %h4 Problem:
      %p.abstract As a system administrator, you spend too much time working on your  laundry list of tasks to keep everything a float.  You need to find  ways to "glue" together the holes in your sinking ship.
      %h4 Solution:
      %p.abstract First, identify the problem areas.  Next, see what is out there to  help you get your task done.  Accept that not every solution out there does exactly what you want.  Finally, start rolling your  own solutions, in Ruby, where they make sense.
      %h4 Conclusion:
      %p.abstract Understand that, while Ruby is not the silver bullet for all your  system administration needs, it does suffice in many areas and  speeds up development of the seemingly endless pile of scripts  needed to stay on top of things.  The key is to not be afraid to  reinvent a wheel here or there to get a better ride.  
      %h3.speaker-title Civic Hacking 
      %p.abstract
        %img{:src=>'/images/speakers/luigi-montanez.jpg', :width=>66, :height=>80, :alt=>'Luigi Montanez'}
        %span.speaker-name Luigi Montanez &ndash;
        How can Ruby change cities, states, and countries for the better? Last year, we saw an explosion of interest around government transparency. The Open Government movement, spearheaded by open source developers, seeks to make government more accountable and responsible by turning open government data into citizen-focused, civic-minded applications.
      %p.abstract Luigi Montanez, a Ruby developer with the Sunlight Labs, will guide you through the Gov 2.0 landscape. You'll learn about the data sets and APIs available freely available for your use, the tools and skills you'll need to be a successful civic hacker, and you'll get a thorough overview of the current civic apps out there. Civic hacking will enhance your open source portfolio while making a difference in your community and country.  
      %h3.speaker-title Cooking 101 - Getting Started with Chef 
      %p.abstract
        %img{:src=>'/images/speakers/john-williams.jpg', :width=>66, :height=>80, :alt=>'John Williams'}
        %span.speaker-name John Williams &ndash;
        The complex nature of application deployment can make configuration management challenging. As you scale your applications by adding more servers the complexity continues to grow, making a headache for even the most experienced systems administrators.
      %p.abstract Chef is a Ruby based open source systems integration framework for managing servers. Using Chef within your infrastructure is economical, scalable and efficient, allowing you to do more with less. Chef lets you manage your servers by writing code, not running commands.
      %p.abstract In this session we will cover:
      %ul
        %li Chef Concepts
        %li Installation
        %li Creating a Chef Repository
        %li Your First Cookbook (and its components)
        %li Chef Nodes, Clients and Roles
        %li Chef Indexes
        %li Executables - Chef Server, Chef Indexer, Chef Client and Chef Solo
        %li Anatomy of a Chef Run
      %h3.speaker-title Integration Testing Strategies: Locally and on the Grid 
      %p.abstract
        %img{:src=>'/images/speakers/kyle-ginavan.jpg', :width=>66, :height=>80, :alt=>'Kyle Ginavan'}
        %img{:src=>'/images/speakers/ryan-felton.jpg', :width=>66, :height=>80, :alt=>'Ryan Felton', :class=>"second-speaker"}
        %span.speaker-name Kyle J. Ginavan, Ryan Felton &ndash;
        An efficient &amp; effective development ecosystem requires thorough testing. The purpose of integration testing is to verify functional, performance, and reliability requirements placed on major design items. Functional and unit tests are an excellent start, however, bugs emerge when not testing the application as a whole.  
        %p.abstract Ryan Felton will begin with a walk through of local integration testing strategies using Capybara gem, which utilizes Selenium Webdriver, to open you web browser, navigate the specified web page, and verify functionality via simple webrat syntax. The second part of this talk will be lead by Kyle Ginavan discussing the short comings of this approach and how to preform multi-browser cross platform integration testing via the <a href="http://www.seleniumshots.com">Selenium Shots</a> integration testing service  
      %h3.speaker-title jQuery and Rails, Sitting in a Tree 
      %p.abstract
        %img{:src=>'/images/speakers/adam-mccrea.jpg', :width=>66, :height=>80, :alt=>'Adam McCrea'}
        %span.speaker-name Adam McCrea &ndash;
        Maybe you've played with jQuery a little bit but still don't feel comfortable with it, or maybe you've only heard about it. Either way, it doesn't take long to learn enough to be dangerous. While jQuery can be intimidating at first, it's based on some very simple principles. Once you grasp those principles, your JavaScript life will never be the same. 
      %p.abstract This talk will focus mostly on jQuery itself, but I'll also hit the basics on how to make the most of jQuery in your Rails apps.  I'll cover the relevant changes in Rails 3, and why you don't need Rails 3 to take advantage of those changes.  By the end of this talk, you'll be easily navigating and manipulating the DOM, writing your own plugins, and of course, amazing your friends with the power and elegance of jQuery.  
      %h3.speaker-title JRuby 
      %p.abstract
        %img{:src=>'/images/speakers/charles-nutter.jpg', :width=>66, :height=>80, :alt=>'Charles Nutter'}
        %span.speaker-name Charles Nutter &ndash;
        Charles Oliver Nutter has been programming most of his life, as a Java developer for the past decade and as a 
        %a{:href => 'http://jruby.org'} JRuby 
        developer for over four years. He currently works at 
        %a{:href => 'http://www.engineyard.com'} Engine Yard 
        and co-leads the JRuby project, an effort to bring the beauty of Ruby and the power of the JVM together. Charles believes in open source and open standards and hopes his efforts on JRuby and other languages will ensure the JVM remains the preferred open-source managed runtime for many years to come. Charles blogs at 
        %a{:href => 'http://blog.headius.com'} blog.headius.com 
        and tweets as 
        %a{:href => 'http://twitter.com/headius'} "headius" 
        on Twitter.
      %h3.speaker-title Memprof: the ruby level memory profiler 
      %p.abstract
        %img{:src=>'/images/speakers/aman-gupta.jpg', :width=>66, :height=>80, :alt=>'Aman Gupta'}
        %span.speaker-name Aman Gupta &amp; Joe Damato &ndash;
        Ever wondered why your ruby script uses so much RAM? Tired of having god restart your rails app every few hours?
      %p.abstract This talk will introduce memprof, a ruby level memory profiler. We'll demo memprof on a variety of real-world examples, including some popular open source projects. Along the way, we'll learn how the ruby VM manages memory, why garbage collection has such a large impact on ruby's performance and some common ways to reduce the memory impact of your ruby applications.   
      %h3.speaker-title Metawhat?  A look into the mysterious metaclass 
      %p.abstract
        %img{:src=>'/images/speakers/brandon-dimcheff.jpg', :width=>66, :height=>80, :alt=>'Brandon Dimcheff'}
        %span.speaker-name Brandon Dimcheff &ndash;
        If you've ever seen "class &lt;&lt; self" in somebody's code and wondered what the heck is going on behind the scenes, you're not alone.  What you've stumbled upon is the ever-elusive metaclass (or eigenclass, or singelton class... take your pick).  The metaclass is often a point of confusion at first, but this is mostly just because Ruby tries its darndest to hide it from you.  In this session, I will show you what's really going on with metaclasses, and how they make Ruby great.  By the end of the session, you will understand how simple and elegant using metaclasses can be.  
      %h3.speaker-title Mobile Safari Apps 
      %p.abstract
        %span.speaker-name Steven Bristol &ndash;
        This talk will demonstrate a few libraries that are meant to make it easy to create mobile safari apps that closely resemble full applications. It will talk about the pros and cons of each and show how easy it is to make them from rails.  
      %h3.speaker-title Object Oriented, Unobtrusive CSS 
      %p.abstract
        %img{:src=>'/images/speakers/john-hwang.jpg', :width=>66, :height=>80, :alt=>'John Hwang'}
        %span.speaker-name John Hwang &ndash;
        To quote Eric Meyer, "Semantic Frameworks are a game-changer." Meta CSS frameworks like SASS, lessCSS, and xCSS are revolutionizing the way we write and manage modern, semantic CSS. With features such as variables, mixins, nested rules and operations, these meta frameworks brings us closer to write our CSS in an object oriented way.  They incorporate CSS frameworks such as Blueprint, Grid960, and YUI and bring together the best of grid design, CSS reset techniques and browser hacks in an unobtrusive and semantic way.  Ultimately, these meta frameworks allow us to develop truly semantic websites that are not only maintainable and fun to develop.  This talk with discuss CSS systems, meta frameworks, and best practices for writing object oriented, unobtrusive semantic code.  
      %h3.speaker-title Practical Ruby Projects with MongoDB 
      %p.abstract
        %img{:src=>'/images/speakers/alex-sharp.jpg', :width=>66, :height=>80, :alt=>'Alex Sharp'}
        %span.speaker-name Alex Sharp &ndash;
        While there is a lot of excitement surrounding MongoDB and the NoSQL movement, MongoDB is all about practicality. MongoDB boasts a robust feature set that provides a pragmatic blend of rich functionality, performance and scalability that today's software developers need, and all at a relatively low barrier to entry. 
      %p.abstract The first part of this talk will focus on the pragmatic justifications for integrating MongoDB into your stack. In short, Mongo's significant performance and scalability benefits matched with a robust feature set provide the flexibility and power needed to smoothly integrate into an existing stack.
      %p.abstract Building off of the first part of this talk, the main part of this talk will highlight some common and practical uses for MongoDB, given it's rich feature set, high level of performance and it's philosophy. 
      %p.abstract Among the projects we'll cover are logging with capped collections, data warehousing for reporting or analytics, and building lightweight, single-purpose ruby applications around a MongoDB collection. We'll also cover more full-featured applications, including a simple accounting application, and the traditional blogging app. 
      %p.abstract The goal in discussing each one of these applications is to highlight a different part Mongo's feature set to show how pragmatic it can be to integrate MongoDB into your stack. By the end of this talk, you will have a solid grasp on Mongo's rich feature set, and why it makes sense in so many situations.   
      %h3.speaker-title Pragmatic Guide to Git 
      %p.abstract
        %img{:src=>'/images/speakers/travis-swicegood.jpg', :width=>66, :height=>80, :alt=>'Travis Swicegood'}
        %span.speaker-name Travis Swicegood &ndash;
        Git is hard; at least if you listen to the naysayers.  Actually, you need to know a handful of commands to navigate Git successfully.  This talk demystifies Git.  Once we're finished you'll know everything you need to start using Git in your day-to-day projects and collaboratively with other developers.  
      %h3.speaker-title Real World Rails: Migrating Legacy Data 
      %p.abstract
        %img{:src=>'/images/speakers/rob-kaufman.jpg', :width=>66, :height=>80, :alt=>'Rob Kaufman'}
        %img{:src=>'/images/speakers/patrick-crowley.jpg', :width=>66, :height=>80, :alt=>'Patrick Crowley', :class=>"second-speaker"}
        %span.speaker-name Rob Kaufman &amp; Patrick Crowley &ndash;
        Rob Kaufman and Patrick Crowley from San Diego Ruby will demonstrate how to make legacy data migration simple, easy, and repeatable; allowing developers to seed new apps with existing data very early in the development process and fine-tune migrations right up until it's time to launch.
      %h4 Legacy migration basics
      %ul
        %li Adding a legacy database adapter
        %li Setting up legacy models
        %li Mapping legacy fields to existing model attributes
        %li Building migration rake tasks
        %li Using helper methods to reformat data
      %h4 Advanced migrations
      %ul
        %li Text encoding issues
        %li Non-relational stores (CSV, XML, wikis, etc.)
        %li MsSQL and other databases
      %h4 Deployment strategies
      %ul
        %li Migrating in production on a typical Rails host
        %li Migrating for Heroku users
      %h3.speaker-title Redis: Persistence Power 
      %p.abstract
        %img{:src=>'/images/speakers/nick-quaranto.jpg', :width=>66, :height=>80, :alt=>'Nick Quaranto'}
        %span.speaker-name Nick Quaranto &ndash;
        Explaining Redis is tough, it’s easy to say “a data structures server” or “memcached on steroids” or something more jargon filled. The biggest selling point of Redis is that usually as programmers we have to bend our data into a table or document to save it, but with Redis we can persist data as we conceptually visualize it. We'll go over the basics of Redis, how to use it with your Ruby applications, and some real use cases.  
      %h3.speaker-title Ruby Techniques By Example 
      %p.abstract
        %img{:src=>'/images/speakers/jeremy-evans.jpg', :width=>66, :height=>80, :alt=>'Jeremy Evans'}
        %span.speaker-name Jeremy Evans &ndash;
        Many presentations focus on showing off new applications and libraries. They show you what has been accomplished, but rarely do they show you how. This presentation will take examples from production code (mainly from Sequel), showing techniques that you can use in your own code. Some of the techniques demonstrated will relate to:
      %ul
        %li Creating more easily extensible code
        %li Handling class-level data within inheritance hierarchies
        %li Improving dynamically defined method performance safely
        %li Structuring DSL implementations
        %li Presenting multiple backends as one  
      %h3.speaker-title Surviving the last 20%: Indispensable real-world tips and techniques for Facebook development that pick up where Facebook gems and plugins leave off. 
      %p.abstract
        %img{:src=>'/images/speakers/mark-daggett.jpg', :width=>66, :height=>80, :alt=>'Mark Daggett'}
        %span.speaker-name Mark Daggett &ndash;
        Tools like Facebooker make Facebook development seductively simple, and they will get you 80% done. Unfortunately, the last 20% can be a brutal death gauntlet, where common mistakes, and API ambiguities among others factors leave budgets shattered, developers exhausted and clients frustrated. I will show you how to survive the last 20% using techniques and code refined over the last two years. This presentation will be segmented into these subtopics:
      %ul
        %li Speeding up Facebook development through Rails templates
        %li Iframe vs. FBML, choosing the right application type
        %li Minimizing API calls, though caching and hydrators
        %li Cheap and easy speed boosts to your Facebook application
        %li Avoiding common development gotchas in Facebook development.
      -# %h4 Description
      -# %p.abstract 
      -# %h4 Abstract
      -# %p.abstract Most programmers have probably had the experience of solving a particularly onerous problem and thinking to themselves “I am glad I never have to solve that again”. Facebook is full of these types of problems, for good reason too. The typical Facebook application has many more integration points in the typical application, and the development environment required for Facebook applications can often seem baroque and restrictive. These limitations have the cumulative effect of making problems hard to identify and harder to solve.
      -# %p.abstract Over the last two years I’ve been collecting answers to the problems that occur during the normal course of Facebook application development. I’ve refined most of them into a Rails template that supplements the Facebooker gem, and the other’s I’ve stashed into libs or developer notes I use as needed. This presentation will explore many of these cryptic bugs and reveal the underlying reason for the trouble. Once explained I’ll show how to develop strategies to eliminate or at least mitigate them throughout the app. This presentation will cover mainly Facebook applications, but will touch on FacebookConnect as well. This presentation will be segmented into these subtopics:
      -# %ul
        -# %li Speeding up Facebook development through Rails templates
        -# %li Iframe vs. FBML, choosing the right application type
        -# %li Minimizing API calls, though caching and hydrators
        -# %li Cheap and easy speed boosts to your Facebook application
        -# %li Avoiding common development gotchas in Facebook development.

      -# %h4 Prior Knowledge Required
      -# %p.abstract This presentation is aimed at the Rails developer who has interest in deploying their application on Facebook. Therefore, some familiarity of how Facebook applications work is helpful, along with a basic knowledge of Rails. 
      -# %p.abstract While developers who have active Facebook applications will benefit from this presentation immediately, those who are in the planning or research stages of their application will also find many time-saving techniques they can roll into their process before development begins.  
      %h3.speaker-title The Interoperable Web: Pipedream or Prognostication?   
      %p.abstract
        %span.speaker-name Michael Bleigh &ndash;
        There are a wave of new open standards taking aim at the holy grail of interoperability: comments cross-posted from one site to another, follow me on Twitter and you follow me on Facebook, too. Are these standards taking hold or are they just an idle pipe dream? Learn about PubSubHubBub, OStatus, Salmon, ActivityStreams and more in a quest to decipher the interoperable web.
      %p.abstract Attendees will learn about different emerging open standards for web interoperability, where they're being used today, and where they could be used in the future. Once a basic understanding of the standards is presented, attendees will get some first-hand examples of the current state of the Ruby ecosystem for these standards and how they can support them in their own applications.  
      %h3.speaker-title The Necessity and Implementation of Speedy Tests 
      %p.abstract
        %span.speaker-name Jake Scruggs &ndash;
        Your project's software practices are deteriorating every minute the developers wait for slow tests to finish. Once developers get fed up and stop running the tests, disregard for failing builds can't be far behind, and from there it's only a short leap to the albatross of a brittle/irrelevant test suite. Luckily this can all be avoided by adopting some time-saving testing standards and practices.
      %p.abstract If everyone knows that test suites should be fast then why do they take so damn long? Some of that is lack of knowledge about what’s fast and what is not, but mostly the problem is lack of awareness of 2 things:
      %ol
        %li When you write tests you should be thinking about their speed. 
        %li A test that needs lots of setup is telling you something: Your object sucks.
      %p.abstract Test suites usually grow and stumble along without too much thought. “Hey thing X looks shiny, let’s add that in.” is about as far as the process often goes. You need to architect your test suite just like any other part of your code. This does NOT mean lots of meetings and UML diagrams, but adopting a set of team testing guidelines and practices. And, of course, communicating those guidelines and practices to new developers.
      %p.abstract Some topics I’ll be discussing:
      %ul
        %li Big Setup == Big Problem
        %li before :each {waste_my_time}
        %li FactoryGirl is too damn awesome
        %li The extra tricky test suite
        %li Just because mocking can solve some of your problems…
        %li Use all your cores, damnit
      %p.abstract I’ve been on 10 projects with automated tests in the last 6 years and I’ve seen speedy confidence inducing suites and others that only served to make developers feel dread and guilt about testing. The point of this talk is to communicate tangible strategies for speedily testing Ruby.  
      %h3.speaker-title User Experience for Library Designers
      %p.abstract
        %img{:src=>'/images/speakers/wesley-beary.jpg', :width=>66, :height=>80, :alt=>'Wesley Beary'}
        %span.speaker-name Wesley Beary &ndash;
        I've written "a lot of code":<a href="http://github.com/geemus">http://github.com/geemus</a>, both hobby and work, over the last year, and looking back I can't help but think that writing code for yourself is easy; it's writing code for others can be tough. In this session, I'll share some examples of good and bad practices gathered in my years writing code and libraries, and discuss how to get past being too close to the problem. I'll talk specifically about growing your work into something anybody (and hopefully everybody) will use.
      %p.abstract Along the way we'll discuss the differences between code for yourself, code for other users and code for collaborators.
      %p.abstract Some example tips:
      %ul
        %li Help new users get started, but don't get in the way of power users.
        %li Examine the seams of your library and consider how you can keep it focused.
        %li Be consistent: more consistent code is easier for others to understand (and contribute to).
      %p.abstract I'll also go over some examples of things to avoid:
      %ul
        %li Don't monkey patching: don't muck with other peoples code, lest it muck back.
        %li Not invented here: once you start writing libraries it can be hard to stop.
        %li Exceptions: if everything in your library works like x, except y, then you always have an extra case to keep in mind.
      %p.abstract I'll share a mix of concepts and concrete examples that altogether will help nail down what it takes to write better library code.
      %h3.speaker-title Zero to Hero 
      %p.abstract
        %img{:src=>'/images/speakers/cory-flanigan.jpg', :width=>66, :height=>80, :alt=>'Cory Flanigan'}
        %span.speaker-name Cory Flanigan &ndash;
        One determined man's journey from fast food restaurant cashier to agile development leader in <span class="strike">three easy steps</span> 5 difficult years. My employer, part of one of the largest privately held media conglomerates in the world, now does development exclusively in Ruby/Rails, using agile methods.  When I started here, waterfall-esque .NET development with no formal process, version control strategy, continuous integration... was the norm. We were losing, big time.  Now, we have all of those things, and are delivering business value faster than ever.  
      %p.abstract I am the technical leader of our development team.  Ruby, Rails, git, and Agile are some of my contributions to the way we do work now.   Five years ago I worked full-time as a cashier at a fast food restaurant, making minimum wage.  My journey did not include graduation from college, a fairy godmother, or some amazing life-changing revelation. 
      %p.abstract My hope is a simple one.  To share hard-earned insights that can help other Rubyists or would-be Rubyists, to recognize and capitalize on potential and opportunity wherever they see it.  Through this insight, I believe they can find greater success, and more joy, in anything they do.
